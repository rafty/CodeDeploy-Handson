AWSTemplateFormatVersion: 2010-09-09
Description: >-
  for CodeDeploy blue green deployment resources
Parameters:
  ProjectName:
    Type: String
    Default: ec
  RoleName:
    Type: String
    Default: websvr
  Environment:
    Type: String
    Default: dev
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: keypair
  InstanceCount:
    Description: Number of Amazon EC2 instances (Must be a number between 1 and 3).
    Type: Number
    Default: 2
    ConstraintDescription: Must be a number between 1 and 3.
    MinValue: 1
    MaxValue: 3
  BuildAMI:
    Description: build java image for CodeDeploy blue green test
    Type: String
    #Default: ami-0e8efddfd41f146b2
    #Default: ami-0a70a8da555c825b3
    Default: ami-0ee3055d91280485d

Resources:
  # -----------------------------------------
  # Elastic Load Balancer
  # -----------------------------------------
  PublicAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-${RoleName}-${Environment}-public-alb
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${RoleName}-${Environment}-public-alb
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-public-sbn1
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-public-sbn2
      Type: application
      SecurityGroups:
        - Fn::ImportValue: !Sub ${ProjectName}-${RoleName}-${Environment}-public-alb-sg

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-${RoleName}-${Environment}-tg
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-vpc
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 120
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${RoleName}-${Environment}-frontend-tg

  Publiclistnener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FrontendTargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicAlb
      Port: 80
      Protocol: HTTP

  # -----------------------------------------
  # AutoScaling LaunchConfiguration
  # -----------------------------------------
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      'AWS::CloudFormation::Init':
        config: {}
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        Fn::ImportValue: !Sub ${ProjectName}-${RoleName}-${Environment}-wsrv-profile
      ImageId: !Ref BuildAMI
      InstanceMonitoring: false
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchConfigurationName: !Sub ${ProjectName}-${RoleName}-${Environment}-lcfg
      SecurityGroups:
        - Fn::ImportValue: !Sub ${ProjectName}-${RoleName}-${Environment}-wsrv-sg
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum -y install ruby
          yum -y install wget
          yum -y install aws-cli
          yum -y install jq

          service httpd stop

          # SSM Agent
          echo "Setup SSM Agent"
          cd /tmp
          yum -y install https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          start amazon-ssm-agent

          # CloudWatch Logs Agent for CodeDeploy
          echo "Setup CloudWatch Logs Agent"
          wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
          wget https://s3.amazonaws.com/aws-codedeploy-${AWS::Region}/cloudwatch/codedeploy_logs.conf
          chmod +x ./awslogs-agent-setup.py
          python awslogs-agent-setup.py -n -r ${AWS::Region} -c s3://aws-codedeploy-${AWS::Region}/cloudwatch/awslogs.conf
          mkdir -p /var/awslogs/etc/config
          cp codedeploy_logs.conf /var/awslogs/etc/config/
          service awslogs restart

          # CodeDeploy Agent
          echo "Setup CodeDeploy Agent"
          cd /home/ec2-user
          wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent restart

          # WebServer LaunchConfig CloudFormation
          echo "Setup WebServer LaunchConfig CloudFormation"
          yum -y install aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerLaunchConfig --region ${AWS::Region}

          # Get Environment Variable from SSM Parameters Sample
          echo "Environment Variable"
          instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          #env=$(aws ec2 describe-tags --region ${AWS::Region} --filters "Name=resource-id,Values=$instance_id" "Name=tag-key,Values=Environment" | jq -r '.Tags[0].Value')
          #export ENV=$env
          #db_profile=$(aws ssm get-parameters --region ${AWS::Region} --name DbProfile-$env | jq -r '.Parameters[0].Value' | base64 --decode)
          #echo $db_profile > /tmp/db_profile.txt

          prj=$(aws ec2 describe-tags --region ${AWS::Region} --filters "Name=resource-id,Values=$instance_id" "Name=tag-key,Values=ProjectName" | jq -r '.Tags[0].Value')
          rname=$(aws ec2 describe-tags --region ${AWS::Region} --filters "Name=resource-id,Values=$instance_id" "Name=tag-key,Values=RoleName" | jq -r '.Tags[0].Value')
          env=$(aws ec2 describe-tags --region ${AWS::Region} --filters "Name=resource-id,Values=$instance_id" "Name=tag-key,Values=Environment" | jq -r '.Tags[0].Value')
          export PRJ=$prj
          export RNAME=$rname
          export ENV=$env
          db_profile=$(aws ssm get-parameters --region ${AWS::Region} --name $prj-$rname-$env-DbProfile | jq -r '.Parameters[0].Value' | base64 --decode)
          echo $db_profile > /tmp/db_profile.txt

          #########
          # db_profile=$(aws ssm get-parameters --region ${AWS::Region} --name DbProfile-$env | jq -r '.Parameters[0].Value' | base64 --decode > /tmp/db_profile.txt)

          # Signal the status from cfn-init"
          /opt/aws/bin/cfn-signal -e $?  --stack ${AWS::StackName} --resource WebServerASG --region ${AWS::Region}

  # -----------------------------------------
  # AutoScalingGroup
  # -----------------------------------------
  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${ProjectName}-${RoleName}-${Environment}-asg
      LaunchConfigurationName: !Ref WebServerLaunchConfig
      MinSize: !Ref InstanceCount
      MaxSize: !Ref InstanceCount
      DesiredCapacity: !Ref InstanceCount
      NotificationConfigurations:
        - NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
            - autoscaling:TEST_NOTIFICATION
          TopicARN:
            Fn::ImportValue: !Sub ${ProjectName}-${RoleName}-${Environment}-asg-topic
      TargetGroupARNs:
        - !Ref FrontendTargetGroup
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-public-sbn1
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-public-sbn2
      Tags:
        - Key: ProjectName
          Value: !Sub ${ProjectName}
          PropagateAtLaunch: true
        - Key: RoleName
          Value: !Sub ${RoleName}
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Sub ${Environment}
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  # -----------------------------------------
  # AutoScaling ScalingPolicy
  # -----------------------------------------
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerASG
      Cooldown: 60
      ScalingAdjustment: 1
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerASG
      Cooldown: 60
      ScalingAdjustment: -1

# -----------------------------------------
# Output
# -----------------------------------------
Outputs:
  URL:
    Description: The URL of the website
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - PublicAlb
          - DNSName
